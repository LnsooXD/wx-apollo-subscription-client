import EventEmitter from 'eventemitter3';
export declare const CONNECTING = 0;
export declare const OPEN = 1;
export declare const CLOSING = 2;
export declare const CLOSED = 3;
export default class WebSocketImpl extends EventEmitter implements WebSocket {
    static CLOSED: number;
    static CLOSING: number;
    static CONNECTING: number;
    static OPEN: number;
    get CLOSED(): number;
    get CLOSING(): number;
    get CONNECTING(): number;
    get OPEN(): number;
    protocol: string;
    get readyState(): number;
    url: string;
    binaryType: BinaryType;
    bufferedAmount: 0;
    extensions: string;
    private socketTask;
    private listenersByType;
    constructor(url: string, protocols?: string[]);
    terminate(): void;
    setMaxListeners(n: number): this;
    getMaxListeners(): number;
    rawListeners(event: string | symbol): Function[];
    prependListener(event: string | symbol, listener: (...args: any[]) => void): this;
    prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;
    dispatchEvent(event: Event): boolean;
    get onclose(): (this: WebSocket, ev: CloseEvent) => any;
    set onclose(listener: (this: WebSocket, ev: CloseEvent) => any);
    get onerror(): (this: WebSocket, ev: Event) => any;
    set onerror(listener: (this: WebSocket, ev: Event) => any);
    get onmessage(): (this: WebSocket, ev: MessageEvent) => any;
    set onmessage(listener: (this: WebSocket, ev: MessageEvent) => any);
    get onopen(): (this: WebSocket, ev: Event) => any;
    set onopen(listener: (this: WebSocket, ev: Event) => any);
    ping(data: any, mask: any, cb: any): void;
    pong(data: any, mask: any, cb: any): void;
    close(code?: number, reason?: string): void;
    send(data: string | ArrayBuffer | SharedArrayBuffer | Blob | ArrayBufferView): void;
    addEventListener<K extends 'close' | 'error' | 'message' | 'open'>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends 'close' | 'error' | 'message' | 'open'>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}
